responses_df$Q26 = gsub("(\\w\\.|\\t)", "", responses_df$Q26)
responses_df$age_years <- ifelse(responses_df$age == "", NA, 2020 - as.numeric(responses_df$age))
responses_df$age <- ifelse(responses_df$age_years > 100, NA, responses_df$age_years)
responses_df$duration <- as.numeric(responses_df$Duration..in.seconds.)
responses_df <- responses_df %>% filter(treatment %in% c("control", "one", "two"))
## correct factors
responses_df$Q23 <- factor( #public reaction
responses_df$Q23,
levels = c(
"",
"The reaction is not at all sufficient",
"The reaction is somewhat insufficient",
"The reaction is appropriate",
"The reaction is somewhat too extreme",
"The reaction is much too extreme"
)
)
responses_df$perceivedreaction <- factor( #govt rection
responses_df$perceivedreaction,
levels = c(
"",
"The reaction is not at all sufficient",
"The reaction is somewhat insufficient",
"The reaction is appropriate",
"The reaction is somewhat too extreme",
"The reaction is much too extreme"
)
)
responses_df$Q36 <- factor( #trust govt
responses_df$Q36,
levels = c(
"",
"Strongly distrust",
"Distrust",
"Neither trust nor distrust",
"Somewhat trust",
"Strongly trust"
)
)
responses_df$Q37 <- factor( #govt been truthful
responses_df$Q37,
levels = c(
"",
"Very untruthful",
"Somewhat untruthful",
"Neither truthful nor untruthful",
"Somewhat truthful",
"Very truthful"
)
)
responses_df$perceivedeffectivnes <- factor( #effectiveness of social distancing
responses_df$perceivedeffectivnes,
levels = c(
"",
"Not at all effective",
"Not effective",
"Neither effective nor ineffective",
"Effective",
"Very effective"
)
)
responses_df$gender <- factor(responses_df$gender, levels=c("Male", "Female", "Other", ""))
responses_df$treatment <- factor(responses_df$treatment, levels=c("control", "one", "two"))
responses_df$health <- factor(responses_df$health, levels=c("Poor", "Fair", "Good", "Excellent", ""))
## create past behavior index
responses_df$past_behavior_index <- (as.numeric(responses_df$SelfReported_Behavio_1) +
as.numeric(responses_df$SelfReported_Behavio_2) +
as.numeric(responses_df$SelfReported_Behavio_3) +
as.numeric(responses_df$SelfReported_Behavio_4) +
as.numeric(responses_df$SelfReported_Behavio_5))/5
responses_df$past_healthy_behavior <- ifelse(
responses_df$past_behavior_index < 33, "Low",
ifelse(
responses_df$past_behavior_index %in% 34:65, "Medium",
ifelse(
responses_df$past_behavior_index > 65, "High", NA
)))
responses_df$past_healthy_behavior <- factor(responses_df$past_healthy_behavior, levels=c("Low", "Medium", "High"))
## create anxiety index (coding NA's as 0 for now)
responses_df$anxiety_1 <- factor(responses_df$anxiety_1,
levels = c(
"Does not apply at all", "Somewhat does not apply", "Neither applies nor does not apply", "Somewhat applies", "Strongly applies"
)
)
responses_df$anxiety_2 <- factor(responses_df$anxiety_2,
levels = rev(c(
"Does not apply at all", "Somewhat does not apply", "Neither applies nor does not apply", "Somewhat applies", "Strongly applies"
))
)
responses_df$anxiety_3 <- factor(responses_df$anxiety_3,
levels = c(
"Does not apply at all", "Somewhat does not apply", "Neither applies nor does not apply", "Somewhat applies", "Strongly applies"
)
)
responses_df$anxiety_4 <- factor(responses_df$anxiety_4,
levels = c(
"Does not apply at all", "Somewhat does not apply", "Neither applies nor does not apply", "Somewhat applies", "Strongly applies"
)
)
responses_df$anxiety_5 <- factor(responses_df$anxiety_5,
levels = c(
"Does not apply at all", "Somewhat does not apply", "Neither applies nor does not apply", "Somewhat applies", "Strongly applies"
)
)
responses_df$anxiety_index <- ((as.numeric(responses_df$anxiety_1) +
as.numeric(responses_df$anxiety_2) +
as.numeric(responses_df$anxiety_3) +
as.numeric(responses_df$anxiety_4) +
as.numeric(responses_df$anxiety_5))/25)*100
## coarsen variables
responses_df$age_group <- ifelse(
responses_df$age %in% 18:29, "18-29",
ifelse(
responses_df$age %in% 30:39, "30-39",
ifelse(
responses_df$age %in% 40:49, "40-49",
ifelse(
responses_df$age %in% 50:59, "50-59",
ifelse(
responses_df$age >= 60, "60+", NA
)))))
responses_df$anxiety_group <- ifelse(
responses_df$anxiety_index < 0.3, "low",
ifelse(
responses_df$anxiety_index > 0.3 & responses_df$anxiety_index < 0.6, "med",
ifelse(
responses_df$anxiety_index > 0.6,
"hi", NA
)
)
)
responses_df$think_publ_extreme <- ifelse(responses_df$Q23 %in% c("The reaction is much too extreme", "The reaction is somewhat too extreme"), "extreme",
ifelse(responses_df$Q23 %in% c("The reaction is somewhat insufficient", "The reaction is not at all sufficient"), "insufficient",
ifelse(responses_df$Q23 %in% c("The reaction is appropriate"), "appropriate", NA)))
responses_df$think_publ_extreme <- factor(responses_df$think_publ_extreme, levels=c("extreme", "appropriate", "insufficient"))
responses_df$think_govt_extreme <- ifelse(responses_df$perceivedreaction %in% c("The reaction is much too extreme", "The reaction is somewhat too extreme"), " extreme",
ifelse(responses_df$perceivedreaction %in% c("The reaction is somewhat insufficient", "The reaction is not at all sufficient"), " insufficient",
ifelse(responses_df$perceivedreaction %in% c("The reaction is appropriate"), " appropriate", NA)))
responses_df$think_govt_extreme <- factor(responses_df$think_govt_extreme, levels=c(" extreme", " appropriate", " insufficient")) ##note spaces
responses_df$think_effec <- ifelse(responses_df$perceivedeffectivnes %in% c("Effective", "Very effective"), " effective",
ifelse(responses_df$perceivedeffectivnes %in% c("Not effective", "Not at all effective"), " not effective",
ifelse(responses_df$perceivedeffectivnes %in% c("Neither effective nor ineffective"), " neutral", NA)))
responses_df$think_effec <- factor(responses_df$think_effec, levels=c(" effective", " neutral", " not effective")) ##note spaces
responses_df$trust_govt <- ifelse(responses_df$Q36 %in% c("Strongly distrust", "Distrust"), "  low",
ifelse(responses_df$Q36 %in% c("Strongly trust", "Somewhat trust"), "  high",
ifelse(responses_df$Q36 %in% c("Neither trust nor distrust"), "  neutral", NA)))
responses_df$trust_govt <- factor(responses_df$trust_govt, levels=c("  high", "  neutral", "  low")) ##note spaces
responses_df$factu_govt <- ifelse(responses_df$Q37 %in% c("Very untruthful", "Somewhat untruthful"), "untruthful",
ifelse(responses_df$Q37 %in% c("Very truthful", "Somewhat truthful"), "truthful",
ifelse(responses_df$Q37 %in% c("Very truthful", "Neither truthful nor untruthful"), "neutral", NA)))
responses_df$factu_govt <- factor(responses_df$factu_govt, levels=c("truthful", "neutral", "untruthful"))
table(responses_df$age_group, responses_df$health)
## save
write.csv(responses_df,
"clean_data.csv"
)
q = seq(1:10)
q
q = seq(1:10)
acf(a)
q = seq(1:10)
acf(q)
help(rnorm)
q = rnorm(100, 0, 3)
acf(q)
q = rnorm(100, 0, 3)
acf(q)
q = rnorm(100, 0, 3)
acf(q)
help(movavg)
help(zoo)
library(zoo)
temp
library(zoo)
data
library(zoo)
temp
library(zoo)
rollmena(temp)
library(zoo)
rollmean(temp)
library(zoo)
rollmean(temp, 1)
data
library(zoo)
rollmean(temp, 100)
library(zoo)
mvg = rollmean(temp, 100)
plot(mvg)
library(zoo)
mvg = rollmean(temp, 100)
plot(mvg)
plot(temp)
library(zoo)
mvg = rollmean(temp, 10000)
library(zoo)
mvg = rollmean(temp, 200)
plot(mvg)
plot(temp)
library(zoo)
mvg = rollmean(temp, 500)
plot(mvg)
plot(temp)
library(zoo)
mvg = rollmean(temp, length(temp))
plot(mvg)
plot(temp)
library(zoo)
mvg = rollmean(temp, length(data))
plot(mvg)
plot(temp)
length(data)
library(zoo)
mvg = rollmean(temp, 828)
plot(mvg)
plot(temp)
library(zoo)
mvg = rollmean(temp, 827)
plot(mvg)
plot(temp)
library(zoo)
mvg = rollmean(temp, 827)
plot(mvg)
plot(temp)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
plot(temp, ylab="Temperature")
lines(maf_fit, lwd=2, col='red')
abline(maf_fit[1],0,lwd=2, col='blue')
library(zoo)
mvg = rollmean(temp, 1)
plot(mvg)
plot(temp)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
plot(temp, ylab="Temperature")
lines(maf_fit, lwd=2, col='red')
abline(maf_fit[1],0,lwd=2, col='blue')
library(zoo)
mvg = rollmean(temp, 50)
plot(mvg)
plot(temp)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
plot(temp, ylab="Temperature")
lines(maf_fit, lwd=2, col='red')
abline(maf_fit[1],0,lwd=2, col='blue')
library(zoo)
mvg = rollmean(temp, 50)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
plot(temp, ylab="Temperature")
lines(mvg, lwd=2, col="brown")
lines(maf_fit, lwd=2, col='red')
abline(maf_fit[1],0,lwd=2, col='blue')
library(zoo)
mvg = rollmean(temp, 1)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
plot(temp, ylab="Temperature")
lines(mvg, lwd=2, col="brown")
lines(maf_fit, lwd=2, col='red')
abline(maf_fit[1],0,lwd=2, col='blue')
library(zoo)
mvg = rollmean(temp, 2)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
plot(temp, ylab="Temperature")
lines(mvg, lwd=2, col="brown")
lines(maf_fit, lwd=2, col='red')
abline(maf_fit[1],0,lwd=2, col='blue')
library(zoo)
mvg = rollmean(temp, 3)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
plot(temp, ylab="Temperature")
lines(mvg, lwd=2, col="brown")
lines(maf_fit, lwd=2, col='red')
abline(maf_fit[1],0,lwd=2, col='blue')
library(zoo)
mvg = rollmean(temp, 10)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
plot(temp, ylab="Temperature")
lines(mvg, lwd=2, col="brown")
lines(maf_fit, lwd=2, col='red')
abline(maf_fit[1],0,lwd=2, col='blue')
library(zoo)
mvg = rollmean(temp, 15)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
plot(temp, ylab="Temperature")
lines(mvg, lwd=2, col="brown")
lines(maf_fit, lwd=2, col='red')
abline(maf_fit[1],0,lwd=2, col='blue')
library(zoo)
mvg = rollmean(temp, 20)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
plot(temp, ylab="Temperature")
lines(mvg, lwd=2, col="brown")
lines(maf_fit, lwd=2, col='red')
abline(maf_fit[1],0,lwd=2, col='blue')
library(zoo)
library(ggplot2)
mvg = rollmean(temp, 20)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
# plot(temp, ylab="Temperature")
# lines(mvg, lwd=2, col="brown")
# lines(maf_fit, lwd=2, col='red')
# abline(maf_fit[1],0,lwd=2, col='blue')
ggplot(temp)
# plot(temp, ylab="Temperature")
# lines(mvg, lwd=2, col="brown")
# lines(maf_fit, lwd=2, col='red')
# abline(maf_fit[1],0,lwd=2, col='blue')
temp
# plot(temp, ylab="Temperature")
# lines(mvg, lwd=2, col="brown")
# lines(maf_fit, lwd=2, col='red')
# abline(maf_fit[1],0,lwd=2, col='blue')
ggplot(data)
time2
library(mgcv)
time2 <- read.csv("/Users/jim/Dropbox (GaTech)/Courses/ISyE6402/Homework/HW1/LA Temp Monthly.csv")
time2
date = time2[1]
date
library(mgcv)
time2 <- read.csv("/Users/jim/Dropbox (GaTech)/Courses/ISyE6402/Homework/HW1/LA Temp Monthly.csv")
date.2 = time2[1]
temp.2 = time2[2]
df
ggplot(df)
library(zoo)
library(ggplot2)
mvg = rollmean(temp, 20)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
# plot(temp, ylab="Temperature")
# lines(mvg, lwd=2, col="brown")
# lines(maf_fit, lwd=2, col='red')
# abline(maf_fit[1],0,lwd=2, col='blue')
ggplot(data=time2, aes=(x=time2, y=temp.2)) + geom_line()
# plot(temp, ylab="Temperature")
# lines(mvg, lwd=2, col="brown")
# lines(maf_fit, lwd=2, col='red')
# abline(maf_fit[1],0,lwd=2, col='blue')
ggplot(data=time2, aes(x=time2, y=temp.2)) + geom_line()
library(zoo)
library(ggplot2)
mvg = rollmean(temp, 20)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
# plot(temp, ylab="Temperature")
# lines(mvg, lwd=2, col="brown")
# lines(maf_fit, lwd=2, col='red')
# abline(maf_fit[1],0,lwd=2, col='blue')
ggplot(data=time2, aes(x=time2))
library(zoo)
library(ggplot2)
mvg = rollmean(temp, 20)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
# plot(temp, ylab="Temperature")
# lines(mvg, lwd=2, col="brown")
# lines(maf_fit, lwd=2, col='red')
# abline(maf_fit[1],0,lwd=2, col='blue')
ggplot(data=time2)
library(zoo)
library(ggplot2)
mvg = rollmean(temp, 20)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
# plot(temp, ylab="Temperature")
# lines(mvg, lwd=2, col="brown")
# lines(maf_fit, lwd=2, col='red')
# abline(maf_fit[1],0,lwd=2, col='blue')
ggplot(data=time2) + geom_line()
library(mgcv)
time2 <- read.csv("/Users/jim/Dropbox (GaTech)/Courses/ISyE6402/Homework/HW1/LA Temp Monthly.csv")
df = data.frame(time2)
library(zoo)
library(ggplot2)
mvg = rollmean(temp, 20)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
# plot(temp, ylab="Temperature")
# lines(mvg, lwd=2, col="brown")
# lines(maf_fit, lwd=2, col='red')
# abline(maf_fit[1],0,lwd=2, col='blue')
ggplot(data=df) + geom_line()
library(zoo)
library(ggplot2)
mvg = rollmean(temp, 20)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
# plot(temp, ylab="Temperature")
# lines(mvg, lwd=2, col="brown")
# lines(maf_fit, lwd=2, col='red')
# abline(maf_fit[1],0,lwd=2, col='blue')
ggplot(data=df)
df
library(zoo)
library(ggplot2)
mvg = rollmean(temp, 20)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
# plot(temp, ylab="Temperature")
# lines(mvg, lwd=2, col="brown")
# lines(maf_fit, lwd=2, col='red')
# abline(maf_fit[1],0,lwd=2, col='blue')
ggplot(data=df, aes(x=Date, y=Temp)) + geom_line()
df
library(zoo)
library(ggplot2)
mvg = rollmean(temp, 20)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
# plot(temp, ylab="Temperature")
# lines(mvg, lwd=2, col="brown")
# lines(maf_fit, lwd=2, col='red')
# abline(maf_fit[1],0,lwd=2, col='blue')
# ggplot(data=df, aes(x=Date, y=Temp)) + geom_line()
ggfortify(temp)
library(ggfortify)
install.packages("ggfortify")
library(zoo)
library(ggplot2)
mvg = rollmean(temp, 20)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
# plot(temp, ylab="Temperature")
# lines(mvg, lwd=2, col="brown")
# lines(maf_fit, lwd=2, col='red')
# abline(maf_fit[1],0,lwd=2, col='blue')
# ggplot(data=df, aes(x=Date, y=Temp)) + geom_line()
library(ggfortify)
ggfortify(temp)
library(ggfortify)
autoplot(temp) + labs(title="AirPassengers")  # where AirPassengers is a 'ts' object
library(zoo)
library(ggplot2)
mvg = rollmean(temp, 20)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
# plot(temp, ylab="Temperature")
# lines(mvg, lwd=2, col="brown")
# lines(maf_fit, lwd=2, col='red')
# abline(maf_fit[1],0,lwd=2, col='blue')
# ggplot(data=df, aes(x=Date, y=Temp)) + geom_line()
library(ggfortify)
ggfortify(temp)
library(zoo)
library(ggplot2)
mvg = rollmean(temp, 20)
time.pts = c(1:length(temp)) # 1656 even
time.pts = c(time.pts-min(time.pts))/max(time.pts)
maf = ksmooth(time.pts, temp, kernel = "box", bandwidth=1)
maf_fit = ts(maf$y, start=c(1950,1), frequency = 12)
# plot(temp, ylab="Temperature")
# lines(mvg, lwd=2, col="brown")
# lines(maf_fit, lwd=2, col='red')
# abline(maf_fit[1],0,lwd=2, col='blue')
# ggplot(data=df, aes(x=Date, y=Temp)) + geom_line()
library(ggfortify)
ggfortify(temp)
library(ggfortify)
ggfortify(temp)
